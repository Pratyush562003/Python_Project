def myModel(): 
model= Sequential() 
model.add((Conv2D(60,(5,5),input_shape=(imageDimesions[0],imageDimesions[1],1),activation='relu'))
 ) # ADDING MORE CONVOLUTION LAYERS = LESS FEATURES BUT CAN CAUSE ACCURACY TO 
INCREASE 
model.add((Conv2D(60, (5,5), activation='relu'))) 
model.add(MaxPooling2D(pool_size=(2,2))) 
model.add((Conv2D(30, (3,3),activation='relu'))) 
model.add((Conv2D(30, (3,3), activation='relu'))) 
model.add(MaxPooling2D(pool_size=(2,2))) 
model.add(Dropout(0.5)) 
model.add(Flatten()) 
model.add(Dense(500,activation='relu')) 
model.add(Dropout(0.5)) 
model.add(Dense(noOfClasses,activation='softmax'))  
model.compile(Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy']) 
return model 
model = myModel() 
print(model.summary()) 
history=model.fit_generator(dataGen.flow(X_train,y_train,batch_size=32),steps_per_epoch=len(X_train)//
 32,epochs=epochs_val,validation_data=(X_validation,y_validation),shuffle=1) 
plt.figure(1) 
plt.plot(history.history['loss']) 
plt.plot(history.history['val_loss']) 
plt.legend(['training','validation']) 
plt.title('loss') 
plt.xlabel('epoch') 
plt.figure(2) 
plt.plot(history.history['accuracy']) 
plt.plot(history.history['val_accuracy']) 
plt.legend(['training','validation']) 
plt.title('Acurracy') 
plt.xlabel('epoch') 
plt.show() 
score =model.evaluate(X_test,y_test,verbose=0) 
print('Test Score:',score[0]) 
print('Test Accuracy:',score[1]) 
model.save("model.h5")
